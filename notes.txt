This version - is P1V3 where the entire forward and reverse txn has been tested using both python script as well web browser user interface.  
Aborting this version as Oraclize is being used along with our server which realy does not keep it trustless
===============
Infura:
Infura node: https://ropsten.infura.io/rWjoIVMZaYJbccSEmLQn

token =  rWjoIVMZaYJbccSEmLQn
Get all methods
https://api.infura.io/v1/jsonrpc/ropsten/methods?token=rWjoIVMZaYJbccSEmLQn

{"get":["web3_clientVersion","net_version","net_listening","net_peerCount","eth_protocolVersion","eth_syncing","eth_mining","eth_hashrate","eth_gasPrice","eth_accounts","eth_blockNumber","eth_getBalance","eth_getStorageAt","eth_getTransactionCount","eth_getBlockTransactionCountByHash","eth_getBlockTransactionCountByNumber","eth_getUncleCountByBlockHash","eth_getUncleCountByBlockNumber","eth_getCode","eth_call","eth_estimateGas","eth_getBlockByHash","eth_getBlockByNumber","eth_getTransactionByHash","eth_getTransactionByBlockHashAndIndex","eth_getTransactionByBlockNumberAndIndex","eth_getTransactionReceipt","eth_getUncleByBlockHashAndIndex","eth_getUncleByBlockNumberAndIndex","eth_getCompilers","eth_getLogs","eth_getWork"],"post":["eth_sendRawTransaction","eth_call","eth_estimateGas","eth_submitWork","eth_submitHashrate"]}

==============
Seems RSK addresses are all lower case, it does not accept checksumed addresses.
==============


curl --include \
    --header "Content-Type: application/json" \
    --header "Accept: application/json" \
  'https://api.infura.io/v1/jsonrpc/ropsten/eth_getTransactionByHash?params=["0x3a232165aa0ae7ae7ea94a3162ee6a8a829390f167ea83e150af204df8624239"]'

# Transaction info returned by Infura

'{"jsonrpc":"2.0","id":23,"result":{"blockHash":"0x884387db730b4943aa6f9f58965210238b67b10fce7bbfd216689297f3768e0e","blockNumber":"0x33053b","from":"0x81b7e08f65bdf5648606c89998a9cc8164397647","gas":"0x5208","gasPrice":"0x3b9aca00","hash":"0x3a232165aa0ae7ae7ea94a3162ee6a8a829390f167ea83e150af204df8624239","input":"0x","nonce":"0x8aa0f0","to":"0x7647e1203e314a99f31e833083f41036ee0da90d","transactionIndex":"0x8c","value":"0xde0b6b3a7640000","v":"0x1b","r":"0x98bca6d5cf67cd7cc4271b74545ab559924492ba9399cf377b1008aa95ff38cf","s":"0x2a8efbda3d777804a2db26614e5e363933e6852adb949098e532de0bc0409e44"}}


==============
Event data structure

AttributeDict({'args': AttributeDict({'sbtc_amount': 1000000000000, 'userRSK': '0x36E7CDF091cbFA3a86611017e813432D98dFD969'}), 'blockHash': HexBytes('0x78cb05484d8f7be641c891f371f89653e1fcc5cc21a829665af7362bc66e5ad2'), 'address': '0x02e806DB0B1DF24089223AA2e560819bAD50feb0', 'transactionHash': HexBytes('0x6dd452d0bef3e5efc2c8067bf17239e9a5d8ecdc758cb57102ca0a34938a927c'), 'blockNumber': 563063, 'event': 'UserDeposited', 'logIndex': 0, 'transactionIndex': 0})

==============
To access Parity from outside like http://stride.ddns.net:8545, give --jsonrpc-intefaces=all option while running Parity

To access RSK from outside like http://stride.ddns.net:4444, in /etc/rsk/*.conf file under rpc { }   add "stride.ddns.net" in hosts list and restart 

============
To unlock accounts on Web3.js (for javascript), you have to define defaultAccount like this and unlock it to use an address.


web3.eth.defaultAccount = web3.eth.accounts[0]
personal.unlockAccount(web3.eth.defaultAccount)
===============
To access Parity via javascript in a webpage using, say, "http://locahost:8545/index.html"  you have to start Parity with --jsonrpc-cors=all option. 

For RSK set "cors" field testnet.conf to "*"
=================
To get private key from UTC file:

>>> from web3.auto import w3
>>> with open("~/.ethereum/rinkeby/keystore/UTC--2018-06-
    10T05-43-22.134895238Z--9e63c0d223d9232a4f3076947ad7cff353cc1a28") 
     as keyfile:
        encrypted_key = keyfile.read()
        w3.eth.enable_unaudited_features()
        private_key = w3.eth.account.decrypt(encrypted_key, password) 

Before calling this function call: w3.eth.enable_unaudited_features()
=================
To sign a transaction

transaction = {
        'to': '0xF0109fC8DF283027b6285cc889F5aA624EaC1F55',
        'value': 1000000000,
        'gas': 2000000,
        'gasPrice': 234567897654321,
        'nonce': 0,
        'chainId': 1
    }
key = '0x4c0883a69102937d6231471b5dbb6204fe5129617082792ae468d01a3f362318'
signed = w3.eth.account.signTransaction(transaction, key)

w3.eth.sendRawTransaction(signed.rawTransaction)

Get nonce with:
w3.eth.getTransactionCount(account_address)
================
For html files run python http server as
python3.5 -m http.server
=====
Accounts on RSK:
To be able to sign transactions we need the private key. Since RSK stores keys in levelDB, we cannot generate private key.  Instead I have taken the UTC* file from Parity and generated Private Key from it. Import this private key in RSK with
web3.personal.importRawKey(private_key_hex_without_0x, password) 
Using the same account address on both Ethereum and RSK is fine, the formats are same.


============
Transaction receipt format

ttributeDict({'gasUsed': 46786, 'contractAddress': None, 'transactionIndex': 1, 'blockNumber': 3581991, 'logsBloom': HexBytes('0xroot': None, 'status': 1, 'logs': [AttributeDict({'address': '0xE6cE9BA4F6F112202aCC359887E20466fC31Ab3F', 'transactionIndex': 1, 'blockHash': HexBytes('0x4c0faad289177931511ac6ac990d689b4905269aafd503a0403e98b69787da78'), 'transactionLogIndex': '0x0', 'blockNumber': 3581991, 'data': '0x00000000000000000000000000000000000000000000000000000002540be400', 'type': 'mined', 'topics': [HexBytes('0x0ff70e913721268f674352b5efa2e7268fcc191c80983d3fdf95fb474768b468')], 'logIndex': 0, 'transactionHash': HexBytes('0x3606ff2b53d5bbd22f6c35473aff06bbde770ed4ce5c9c6f969736206c06b94b')}), AttributeDict({'address': '0xD1CE1394173eF6601a4BB4634AF6702473A45749', 'transactionIndex': 1, 'blockHash': HexBytes('0x4c0faad289177931511ac6ac990d689b4905269aafd503a0403e98b69787da78'), 'transactionLogIndex': '0x1', 'blockNumber': 3581991, 'data': '0x0000000000000000000000000000000014145dd770e048d8b7cd78a8a6be70d8', 'type': 'mined', 'topics': [HexBytes('0x86d2bfce22020f31b1a01cf419a0ab207f17669ad7a329337978a47e66e7874f')], 'logIndex': 1, 'transactionHash': HexBytes('0x3606ff2b53d5bbd22f6c35473aff06bbde770ed4ce5c9c6f969736206c06b94b')})], 'blockHash': HexBytes('0x4c0faad289177931511ac6ac990d689b4905269aafd503a0403e98b69787da78'), 'cumulativeGasUsed': 66655, 'transactionHash': HexBytes('0x3606ff2b53d5bbd22f6c35473aff06bbde770ed4ce5c9c6f969736206c06b94b')})

============
For generating Trie in python install py-trie 

================
Gas used for latest version as of 22-July-2018:

Forward Txn
===========
Custodian,ETH,Deposit ether to contract:     190455
Custodian, RSK,Ack to user:                   32632
User,RSK,Deposit SBTC:                       167529
User,Eth,Issue EBTC:                          61786

Reverse Txn:
===========
User,Eth,Approve EBTC:                        30537
User,ETh,Surrender EBTC:                      45223
ThirdParty,RSK,Submit block header:          171505
ThirdParty,RSK,Submit highest block:         164643
User,RSK,Redeem SBTC:                        273165
